name: Buddy Update

on:
  schedule:
    - cron: '0 */2 * * *' # Every 2 hours for testing (more reasonable for testing)
  workflow_dispatch: # Manual triggering for development
    inputs:
      strategy:
        description: Update strategy
        required: false
        default: patch
        type: choice
        options:
          - all
          - major
          - minor
          - patch
      dry_run:
        description: Dry run (preview only)
        required: false
        default: true
        type: boolean
      packages:
        description: Specific packages (comma-separated)
        required: false
        type: string
      verbose:
        description: Enable verbose logging
        required: false
        default: true
        type: boolean

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  checks: read
  statuses: read

jobs:
  test-dependency-updates:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup PHP and Composer (if needed)
        if: ${{ hashFiles('composer.json') != '' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          tools: composer
          coverage: none

      - name: Install dependencies
        run: bun install

      - name: Install Composer dependencies (if needed)
        if: ${{ hashFiles('composer.json') != '' }}
        run: composer install --no-dev --prefer-dist --optimize-autoloader

      - name: Build buddy-bot
        run: bun run build

      - name: Configure Git
        run: |
          git config --global user.name "buddy-bot[bot]"
          git config --global user.email "buddy-bot[bot]@users.noreply.github.com"

      - name: Verify Composer setup
        run: |
          echo "🔍 Verifying Composer and PHP setup..."
          php --version
          composer --version
          echo ""
          echo "📦 Checking composer.json..."
          if [ -f "composer.json" ]; then
            echo "✅ composer.json found"
            composer validate --no-check-all --strict
            echo ""
            echo "📋 Composer packages in composer.json:"
            cat composer.json | jq -r '.require, ."require-dev" | to_entries[] | "\(.key): \(.value)"' 2>/dev/null || echo "Unable to parse with jq, showing raw content:"
          else
            echo "❌ composer.json not found"
          fi

      - name: Display test configuration
        run: |
          echo "🧪 **Buddy Bot Testing Mode**"
          echo "Strategy: ${{ github.event.inputs.strategy || 'patch' }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run || 'true' }}"
          echo "Packages: ${{ github.event.inputs.packages || 'all' }}"
          echo "Verbose: ${{ github.event.inputs.verbose || 'true' }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Run Buddy dependency scan
        run: |
          STRATEGY="${{ github.event.inputs.strategy || 'patch' }}"
          PACKAGES="${{ github.event.inputs.packages }}"
          VERBOSE="${{ github.event.inputs.verbose || 'true' }}"

          echo "🔍 Scanning for dependency updates..."
          echo "Strategy: $STRATEGY"
          echo "Packages: ${PACKAGES:-all}"
          echo "Verbose: $VERBOSE"
          echo ""

          set -e  # Exit on any error

          if [ "$PACKAGES" != "" ]; then
            if [ "$VERBOSE" = "true" ]; then
              bun buddy scan --packages "$PACKAGES" --verbose
            else
              bun buddy scan --packages "$PACKAGES"
            fi
          else
            if [ "$VERBOSE" = "true" ]; then
              bun buddy scan --strategy "$STRATEGY" --verbose
            else
              bun buddy scan --strategy "$STRATEGY"
            fi
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Buddy dependency updates
        if: ${{ github.event.inputs.dry_run != 'true' }}
        run: |
          STRATEGY="${{ github.event.inputs.strategy || 'patch' }}"
          PACKAGES="${{ github.event.inputs.packages }}"
          VERBOSE="${{ github.event.inputs.verbose || 'true' }}"

          echo "🚀 Running dependency updates..."
          echo "This will create/update PRs if outdated dependencies are found"
          echo ""

          set -e  # Exit on any error

          if [ "$PACKAGES" != "" ]; then
            if [ "$VERBOSE" = "true" ]; then
              bun buddy update --packages "$PACKAGES" --verbose
            else
              bun buddy update --packages "$PACKAGES"
            fi
          else
            if [ "$VERBOSE" = "true" ]; then
              bun buddy update --strategy "$STRATEGY" --verbose
            else
              bun buddy update --strategy "$STRATEGY"
            fi
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Dry run notification
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          echo "ℹ️ **Dry Run Mode** - No changes were made"
          echo "To apply updates, run this workflow again with 'Dry run' set to false"

      - name: Create test summary
        if: always()
        run: |
          echo "## 🧪 Buddy Bot Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: ${{ github.event.inputs.strategy || 'patch' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry run**: ${{ github.event.inputs.dry_run || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Packages**: ${{ github.event.inputs.packages || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Verbose**: ${{ github.event.inputs.verbose || 'true' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "⏰ **Scheduled Run**: This was triggered automatically every 2 hours" >> $GITHUB_STEP_SUMMARY
            echo "💡 **Tip**: Use 'Actions' tab to manually trigger with custom settings" >> $GITHUB_STEP_SUMMARY
          else
            echo "🖱️ **Manual Trigger**: This was triggered manually from the Actions tab" >> $GITHUB_STEP_SUMMARY
            echo "⏰ **Auto-Schedule**: This workflow also runs every 2 hours for testing" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 View detailed logs above for scan and update results." >> $GITHUB_STEP_SUMMARY
